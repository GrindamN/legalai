{"version":3,"file":"index.nR-Iv0IK.js","sources":["../../../../../../src/lib/apis/ollama/index.ts"],"sourcesContent":["import { OLLAMA_API_BASE_URL } from '$lib/constants';\r\n\r\nexport const getOllamaConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateOllamaConfig = async (token: string = '', enable_ollama_api: boolean) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tenable_ollama_api: enable_ollama_api\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOllamaUrls = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/urls`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OLLAMA_BASE_URLS;\r\n};\r\n\r\nexport const updateOllamaUrls = async (token: string = '', urls: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/urls/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turls: urls\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OLLAMA_BASE_URLS;\r\n};\r\n\r\nexport const getOllamaVersion = async (token: string, urlIdx?: number) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/version${urlIdx ? `/${urlIdx}` : ''}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res?.version ?? false;\r\n};\r\n\r\nexport const getOllamaModels = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/tags`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn (res?.models ?? [])\r\n\t\t.map((model) => ({ id: model.model, name: model.name ?? model.model, ...model }))\r\n\t\t.sort((a, b) => {\r\n\t\t\treturn a.name.localeCompare(b.name);\r\n\t\t});\r\n};\r\n\r\nexport const generatePrompt = async (token: string = '', model: string, conversation: string) => {\r\n\tlet error = null;\r\n\r\n\tif (conversation === '') {\r\n\t\tconversation = '[no existing conversation]';\r\n\t}\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/generate`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: `Conversation:\r\n\t\t\t${conversation}\r\n\r\n\t\t\tAs USER in the conversation above, your task is to continue the conversation. Remember, Your responses should be crafted as if you're a human conversing in a natural, realistic manner, keeping in mind the context and flow of the dialogue. Please generate a fitting response to the last message in the conversation, or if there is no existing conversation, initiate one as a normal person would.\r\n\t\t\t\r\n\t\t\tResponse:\r\n\t\t\t`\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateEmbeddings = async (token: string = '', model: string, text: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/embeddings`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: text\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateTextCompletion = async (token: string = '', model: string, text: string) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/generate`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tprompt: text,\r\n\t\t\tstream: true\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const generateChatCompletion = async (token: string = '', body: object) => {\r\n\tlet controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/chat`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t}).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const createModel = async (\r\n\ttoken: string,\r\n\ttagName: string,\r\n\tcontent: string,\r\n\turlIdx: string | null = null\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/api/create${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: tagName,\r\n\t\t\t\tmodelfile: content\r\n\t\t\t})\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const deleteModel = async (token: string, tagName: string, urlIdx: string | null = null) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/api/delete${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'DELETE',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\tname: tagName\r\n\t\t\t})\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.then((json) => {\r\n\t\t\tconsole.log(json);\r\n\t\t\treturn true;\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = err;\r\n\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t}\r\n\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const pullModel = async (token: string, tagName: string, urlIdx: number | null = null) => {\r\n\tlet error = null;\r\n\tconst controller = new AbortController();\r\n\r\n\tconst res = await fetch(`${OLLAMA_API_BASE_URL}/api/pull${urlIdx !== null ? `/${urlIdx}` : ''}`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tname: tagName\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const downloadModel = async (\r\n\ttoken: string,\r\n\tdownload_url: string,\r\n\turlIdx: string | null = null\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/models/download${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: JSON.stringify({\r\n\t\t\t\turl: download_url\r\n\t\t\t})\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn res;\r\n};\r\n\r\nexport const uploadModel = async (token: string, file: File, urlIdx: string | null = null) => {\r\n\tlet error = null;\r\n\r\n\tconst formData = new FormData();\r\n\tformData.append('file', file);\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OLLAMA_API_BASE_URL}/models/upload${urlIdx !== null ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'POST',\r\n\t\t\theaders: {\r\n\t\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t\t},\r\n\t\t\tbody: formData\r\n\t\t}\r\n\t).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\r\n\t\tif ('detail' in err) {\r\n\t\t\terror = err.detail;\r\n\t\t}\r\n\r\n\t\treturn null;\r\n\t});\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\treturn res;\r\n};\r\n\r\n// export const pullModel = async (token: string, tagName: string) => {\r\n// \treturn await fetch(`${OLLAMA_API_BASE_URL}/pull`, {\r\n// \t\tmethod: 'POST',\r\n// \t\theaders: {\r\n// \t\t\t'Content-Type': 'text/event-stream',\r\n// \t\t\tAuthorization: `Bearer ${token}`\r\n// \t\t},\r\n// \t\tbody: JSON.stringify({\r\n// \t\t\tname: tagName\r\n// \t\t})\r\n// \t});\r\n// };\r\n"],"names":["getOllamaConfig","token","error","res","OLLAMA_API_BASE_URL","err","updateOllamaConfig","enable_ollama_api","getOllamaUrls","updateOllamaUrls","urls","getOllamaVersion","urlIdx","generateChatCompletion","body","controller","createModel","tagName","content","deleteModel","json","pullModel","downloadModel","download_url","uploadModel","file","formData"],"mappings":"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"}