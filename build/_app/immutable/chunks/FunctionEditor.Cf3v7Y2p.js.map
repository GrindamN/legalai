{"version":3,"file":"FunctionEditor.Cf3v7Y2p.js","sources":["../../../../../../src/lib/components/workspace/Functions/FunctionEditor.svelte"],"sourcesContent":["<script>\r\n\timport { getContext, createEventDispatcher, onMount } from 'svelte';\r\n\timport { goto } from '$app/navigation';\r\n\r\n\tconst dispatch = createEventDispatcher();\r\n\tconst i18n = getContext('i18n');\r\n\r\n\timport CodeEditor from '$lib/components/common/CodeEditor.svelte';\r\n\timport ConfirmDialog from '$lib/components/common/ConfirmDialog.svelte';\r\n\r\n\tlet formElement = null;\r\n\tlet loading = false;\r\n\tlet showConfirm = false;\r\n\r\n\texport let edit = false;\r\n\texport let clone = false;\r\n\r\n\texport let id = '';\r\n\texport let name = '';\r\n\texport let meta = {\r\n\t\tdescription: ''\r\n\t};\r\n\texport let content = '';\r\n\r\n\t$: if (name && !edit && !clone) {\r\n\t\tid = name.replace(/\\s+/g, '_').toLowerCase();\r\n\t}\r\n\r\n\tlet codeEditor;\r\n\tlet boilerplate = `\"\"\"\r\ntitle: Example Filter\r\nauthor: open-webui\r\nauthor_url: https://github.com/open-webui\r\nfunding_url: https://github.com/open-webui\r\nversion: 0.1\r\n\"\"\"\r\n\r\nfrom pydantic import BaseModel, Field\r\nfrom typing import Optional\r\n\r\n\r\nclass Filter:\r\n    class Valves(BaseModel):\r\n        priority: int = Field(\r\n            default=0, description=\"Priority level for the filter operations.\"\r\n        )\r\n        max_turns: int = Field(\r\n            default=8, description=\"Maximum allowable conversation turns for a user.\"\r\n        )\r\n        pass\r\n\r\n    class UserValves(BaseModel):\r\n        max_turns: int = Field(\r\n            default=4, description=\"Maximum allowable conversation turns for a user.\"\r\n        )\r\n        pass\r\n\r\n    def __init__(self):\r\n        # Indicates custom file handling logic. This flag helps disengage default routines in favor of custom\r\n        # implementations, informing the WebUI to defer file-related operations to designated methods within this class.\r\n        # Alternatively, you can remove the files directly from the body in from the inlet hook\r\n        # self.file_handler = True\r\n\r\n        # Initialize 'valves' with specific configurations. Using 'Valves' instance helps encapsulate settings,\r\n        # which ensures settings are managed cohesively and not confused with operational flags like 'file_handler'.\r\n        self.valves = self.Valves()\r\n        pass\r\n\r\n    def inlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\r\n        # Modify the request body or validate it before processing by the chat completion API.\r\n        # This function is the pre-processor for the API where various checks on the input can be performed.\r\n        # It can also modify the request before sending it to the API.\r\n        print(f\"inlet:{__name__}\")\r\n        print(f\"inlet:body:{body}\")\r\n        print(f\"inlet:user:{__user__}\")\r\n\r\n        if __user__.get(\"role\", \"admin\") in [\"user\", \"admin\"]:\r\n            messages = body.get(\"messages\", [])\r\n\r\n            max_turns = min(__user__[\"valves\"].max_turns, self.valves.max_turns)\r\n            if len(messages) > max_turns:\r\n                raise Exception(\r\n                    f\"Conversation turn limit exceeded. Max turns: {max_turns}\"\r\n                )\r\n\r\n        return body\r\n\r\n    def outlet(self, body: dict, __user__: Optional[dict] = None) -> dict:\r\n        # Modify or analyze the response body after processing by the API.\r\n        # This function is the post-processor for the API, which can be used to modify the response\r\n        # or perform additional checks and analytics.\r\n        print(f\"outlet:{__name__}\")\r\n        print(f\"outlet:body:{body}\")\r\n        print(f\"outlet:user:{__user__}\")\r\n\r\n        return body\r\n`;\r\n\r\n\tconst _boilerplate = `from pydantic import BaseModel\r\nfrom typing import Optional, Union, Generator, Iterator\r\nfrom open_webui.utils.misc import get_last_user_message\r\n\r\nimport os\r\nimport requests\r\n\r\n\r\n# Filter Class: This class is designed to serve as a pre-processor and post-processor\r\n# for request and response modifications. It checks and transforms requests and responses\r\n# to ensure they meet specific criteria before further processing or returning to the user.\r\nclass Filter:\r\n    class Valves(BaseModel):\r\n        max_turns: int = 4\r\n        pass\r\n\r\n    def __init__(self):\r\n        # Indicates custom file handling logic. This flag helps disengage default routines in favor of custom\r\n        # implementations, informing the WebUI to defer file-related operations to designated methods within this class.\r\n        # Alternatively, you can remove the files directly from the body in from the inlet hook\r\n        self.file_handler = True\r\n\r\n        # Initialize 'valves' with specific configurations. Using 'Valves' instance helps encapsulate settings,\r\n        # which ensures settings are managed cohesively and not confused with operational flags like 'file_handler'.\r\n        self.valves = self.Valves(**{\"max_turns\": 2})\r\n        pass\r\n\r\n    def inlet(self, body: dict, user: Optional[dict] = None) -> dict:\r\n        # Modify the request body or validate it before processing by the chat completion API.\r\n        # This function is the pre-processor for the API where various checks on the input can be performed.\r\n        # It can also modify the request before sending it to the API.\r\n        print(f\"inlet:{__name__}\")\r\n        print(f\"inlet:body:{body}\")\r\n        print(f\"inlet:user:{user}\")\r\n\r\n        if user.get(\"role\", \"admin\") in [\"user\", \"admin\"]:\r\n            messages = body.get(\"messages\", [])\r\n            if len(messages) > self.valves.max_turns:\r\n                raise Exception(\r\n                    f\"Conversation turn limit exceeded. Max turns: {self.valves.max_turns}\"\r\n                )\r\n\r\n        return body\r\n\r\n    def outlet(self, body: dict, user: Optional[dict] = None) -> dict:\r\n        # Modify or analyze the response body after processing by the API.\r\n        # This function is the post-processor for the API, which can be used to modify the response\r\n        # or perform additional checks and analytics.\r\n        print(f\"outlet:{__name__}\")\r\n        print(f\"outlet:body:{body}\")\r\n        print(f\"outlet:user:{user}\")\r\n\r\n        messages = [\r\n            {\r\n                **message,\r\n                \"content\": f\"{message['content']} - @@Modified from Filter Outlet\",\r\n            }\r\n            for message in body.get(\"messages\", [])\r\n        ]\r\n\r\n        return {\"messages\": messages}\r\n\r\n\r\n\r\n# Pipe Class: This class functions as a customizable pipeline.\r\n# It can be adapted to work with any external or internal models,\r\n# making it versatile for various use cases outside of just OpenAI models.\r\nclass Pipe:\r\n    class Valves(BaseModel):\r\n        OPENAI_API_BASE_URL: str = \"https://api.openai.com/v1\"\r\n        OPENAI_API_KEY: str = \"your-key\"\r\n        pass\r\n\r\n    def __init__(self):\r\n        self.type = \"manifold\"\r\n        self.valves = self.Valves()\r\n        self.pipes = self.get_openai_models()\r\n        pass\r\n\r\n    def get_openai_models(self):\r\n        if self.valves.OPENAI_API_KEY:\r\n            try:\r\n                headers = {}\r\n                headers[\"Authorization\"] = f\"Bearer {self.valves.OPENAI_API_KEY}\"\r\n                headers[\"Content-Type\"] = \"application/json\"\r\n\r\n                r = requests.get(\r\n                    f\"{self.valves.OPENAI_API_BASE_URL}/models\", headers=headers\r\n                )\r\n\r\n                models = r.json()\r\n                return [\r\n                    {\r\n                        \"id\": model[\"id\"],\r\n                        \"name\": model[\"name\"] if \"name\" in model else model[\"id\"],\r\n                    }\r\n                    for model in models[\"data\"]\r\n                    if \"gpt\" in model[\"id\"]\r\n                ]\r\n\r\n            except Exception as e:\r\n\r\n                print(f\"Error: {e}\")\r\n                return [\r\n                    {\r\n                        \"id\": \"error\",\r\n                        \"name\": \"Could not fetch models from OpenAI, please update the API Key in the valves.\",\r\n                    },\r\n                ]\r\n        else:\r\n            return []\r\n\r\n    def pipe(self, body: dict) -> Union[str, Generator, Iterator]:\r\n        # This is where you can add your custom pipelines like RAG.\r\n        print(f\"pipe:{__name__}\")\r\n\r\n        if \"user\" in body:\r\n            print(body[\"user\"])\r\n            del body[\"user\"]\r\n\r\n        headers = {}\r\n        headers[\"Authorization\"] = f\"Bearer {self.valves.OPENAI_API_KEY}\"\r\n        headers[\"Content-Type\"] = \"application/json\"\r\n\r\n        model_id = body[\"model\"][body[\"model\"].find(\".\") + 1 :]\r\n        payload = {**body, \"model\": model_id}\r\n        print(payload)\r\n\r\n        try:\r\n            r = requests.post(\r\n                url=f\"{self.valves.OPENAI_API_BASE_URL}/chat/completions\",\r\n                json=payload,\r\n                headers=headers,\r\n                stream=True,\r\n            )\r\n\r\n            r.raise_for_status()\r\n\r\n            if body[\"stream\"]:\r\n                return r.iter_lines()\r\n            else:\r\n                return r.json()\r\n        except Exception as e:\r\n            return f\"Error: {e}\"\r\n`;\r\n\r\n\tconst saveHandler = async () => {\r\n\t\tloading = true;\r\n\t\tdispatch('save', {\r\n\t\t\tid,\r\n\t\t\tname,\r\n\t\t\tmeta,\r\n\t\t\tcontent\r\n\t\t});\r\n\t};\r\n\r\n\tconst submitHandler = async () => {\r\n\t\tif (codeEditor) {\r\n\t\t\tconst res = await codeEditor.formatPythonCodeHandler();\r\n\r\n\t\t\tif (res) {\r\n\t\t\t\tconsole.log('Code formatted successfully');\r\n\t\t\t\tsaveHandler();\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n</script>\r\n\r\n<div class=\" flex flex-col justify-between w-full overflow-y-auto h-full\">\r\n\t<div class=\"mx-auto w-full md:px-0 h-full\">\r\n\t\t<form\r\n\t\t\tbind:this={formElement}\r\n\t\t\tclass=\" flex flex-col max-h-[100dvh] h-full\"\r\n\t\t\ton:submit|preventDefault={() => {\r\n\t\t\t\tif (edit) {\r\n\t\t\t\t\tsubmitHandler();\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowConfirm = true;\r\n\t\t\t\t}\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<div class=\"mb-2.5\">\r\n\t\t\t\t<button\r\n\t\t\t\t\tclass=\"flex space-x-1\"\r\n\t\t\t\t\ton:click={() => {\r\n\t\t\t\t\t\tgoto('/workspace/functions');\r\n\t\t\t\t\t}}\r\n\t\t\t\t\ttype=\"button\"\r\n\t\t\t\t>\r\n\t\t\t\t\t<div class=\" self-center\">\r\n\t\t\t\t\t\t<svg\r\n\t\t\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\r\n\t\t\t\t\t\t\tviewBox=\"0 0 20 20\"\r\n\t\t\t\t\t\t\tfill=\"currentColor\"\r\n\t\t\t\t\t\t\tclass=\"w-4 h-4\"\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<path\r\n\t\t\t\t\t\t\t\tfill-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t\td=\"M17 10a.75.75 0 01-.75.75H5.612l4.158 3.96a.75.75 0 11-1.04 1.08l-5.5-5.25a.75.75 0 010-1.08l5.5-5.25a.75.75 0 111.04 1.08L5.612 9.25H16.25A.75.75 0 0117 10z\"\r\n\t\t\t\t\t\t\t\tclip-rule=\"evenodd\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</svg>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div class=\" self-center font-medium text-sm\">{$i18n.t('Back')}</div>\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\r\n\t\t\t<div class=\"flex flex-col flex-1 overflow-auto h-0 rounded-lg\">\r\n\t\t\t\t<div class=\"w-full mb-2 flex flex-col gap-1.5\">\r\n\t\t\t\t\t<div class=\"flex gap-2 w-full\">\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclass=\"w-full px-3 py-2 text-sm font-medium bg-gray-50 dark:bg-gray-850 dark:text-gray-200 rounded-lg outline-none\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder={$i18n.t('Function Name (e.g. My Filter)')}\r\n\t\t\t\t\t\t\tbind:value={name}\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\tclass=\"w-full px-3 py-2 text-sm font-medium disabled:text-gray-300 dark:disabled:text-gray-700 bg-gray-50 dark:bg-gray-850 dark:text-gray-200 rounded-lg outline-none\"\r\n\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\tplaceholder={$i18n.t('Function ID (e.g. my_filter)')}\r\n\t\t\t\t\t\t\tbind:value={id}\r\n\t\t\t\t\t\t\trequired\r\n\t\t\t\t\t\t\tdisabled={edit}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclass=\"w-full px-3 py-2 text-sm font-medium bg-gray-50 dark:bg-gray-850 dark:text-gray-200 rounded-lg outline-none\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tplaceholder={$i18n.t(\r\n\t\t\t\t\t\t\t'Function Description (e.g. A filter to remove profanity from text)'\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t\tbind:value={meta.description}\r\n\t\t\t\t\t\trequired\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"mb-2 flex-1 overflow-auto h-0 rounded-lg\">\r\n\t\t\t\t\t<CodeEditor\r\n\t\t\t\t\t\tbind:value={content}\r\n\t\t\t\t\t\tbind:this={codeEditor}\r\n\t\t\t\t\t\t{boilerplate}\r\n\t\t\t\t\t\ton:save={() => {\r\n\t\t\t\t\t\t\tif (formElement) {\r\n\t\t\t\t\t\t\t\tformElement.requestSubmit();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div class=\"pb-3 flex justify-between\">\r\n\t\t\t\t\t<div class=\"flex-1 pr-3\">\r\n\t\t\t\t\t\t<div class=\"text-xs text-gray-500 line-clamp-2\">\r\n\t\t\t\t\t\t\t<span class=\" font-semibold dark:text-gray-200\">{$i18n.t('Warning:')}</span>\r\n\t\t\t\t\t\t\t{$i18n.t('Functions allow arbitrary code execution')} <br />—\r\n\t\t\t\t\t\t\t<span class=\" font-medium dark:text-gray-400\"\r\n\t\t\t\t\t\t\t\t>{$i18n.t(`don't install random functions from sources you don't trust.`)}</span\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclass=\"px-3 py-1.5 text-sm font-medium bg-emerald-600 hover:bg-emerald-700 text-gray-50 transition rounded-lg\"\r\n\t\t\t\t\t\ttype=\"submit\"\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\t{$i18n.t('Save')}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t</div>\r\n</div>\r\n\r\n<ConfirmDialog\r\n\tbind:show={showConfirm}\r\n\ton:confirm={() => {\r\n\t\tsubmitHandler();\r\n\t}}\r\n>\r\n\t<div class=\"text-sm text-gray-500\">\r\n\t\t<div class=\" bg-yellow-500/20 text-yellow-700 dark:text-yellow-200 rounded-lg px-4 py-3\">\r\n\t\t\t<div>{$i18n.t('Please carefully review the following warnings:')}</div>\r\n\r\n\t\t\t<ul class=\" mt-1 list-disc pl-4 text-xs\">\r\n\t\t\t\t<li>{$i18n.t('Functions allow arbitrary code execution.')}</li>\r\n\t\t\t\t<li>{$i18n.t('Do not install functions from sources you do not fully trust.')}</li>\r\n\t\t\t</ul>\r\n\t\t</div>\r\n\r\n\t\t<div class=\"my-3\">\r\n\t\t\t{$i18n.t(\r\n\t\t\t\t'I acknowledge that I have read and I understand the implications of my action. I am aware of the risks associated with executing arbitrary code and I have verified the trustworthiness of the source.'\r\n\t\t\t)}\r\n\t\t</div>\r\n\t</div>\r\n</ConfirmDialog>\r\n"],"names":["ctx","insert_hydration","target","div3","anchor","append_hydration","div1","div0","ul","li0","li1","div2","set_data","t0","t0_value","t2","t2_value","t4","t4_value","t6","t6_value","t12_value","div11","div10","form","button0","div9","div4","input0","input1","input2","set_input_value","div5","div8","div7","div6","span0","br","span1","button1","t1","t1_value","dirty","t7","t7_value","t9","t9_value","current","t12","t14","t14_value","dispatch","createEventDispatcher","i18n","getContext","formElement","showConfirm","edit","$$props","clone","id","name","meta","content","codeEditor","boilerplate","saveHandler","submitHandler","goto","value","$$value","$$invalidate"],"mappings":"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"}