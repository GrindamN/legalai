{"version":3,"file":"index.D9O-Hl4z.js","sources":["../../../../../../src/lib/apis/openai/index.ts"],"sourcesContent":["import { OPENAI_API_BASE_URL } from '$lib/constants';\r\n\r\nexport const getOpenAIConfig = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const updateOpenAIConfig = async (token: string = '', enable_openai_api: boolean) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/config/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tenable_openai_api: enable_openai_api\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIUrls = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const updateOpenAIUrls = async (token: string = '', urls: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/urls/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\turls: urls\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_BASE_URLS;\r\n};\r\n\r\nexport const getOpenAIKeys = async (token: string = '') => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const updateOpenAIKeys = async (token: string = '', keys: string[]) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/keys/update`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tkeys: keys\r\n\t\t})\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\tif ('detail' in err) {\r\n\t\t\t\terror = err.detail;\r\n\t\t\t} else {\r\n\t\t\t\terror = 'Server connection failed';\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res.OPENAI_API_KEYS;\r\n};\r\n\r\nexport const getOpenAIModels = async (token: string, urlIdx?: number) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(\r\n\t\t`${OPENAI_API_BASE_URL}/models${typeof urlIdx === 'number' ? `/${urlIdx}` : ''}`,\r\n\t\t{\r\n\t\t\tmethod: 'GET',\r\n\t\t\theaders: {\r\n\t\t\t\tAccept: 'application/json',\r\n\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t...(token && { authorization: `Bearer ${token}` })\r\n\t\t\t}\r\n\t\t}\r\n\t)\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn [];\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n\r\nexport const getOpenAIModelsDirect = async (\r\n\tbase_url: string = 'https://api.openai.com/v1',\r\n\tapi_key: string = ''\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${base_url}/models`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${api_key}`\r\n\t\t}\r\n\t})\r\n\t\t.then(async (res) => {\r\n\t\t\tif (!res.ok) throw await res.json();\r\n\t\t\treturn res.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t\terror = `OpenAI: ${err?.error?.message ?? 'Network Problem'}`;\r\n\t\t\treturn null;\r\n\t\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\tconst models = Array.isArray(res) ? res : (res?.data ?? null);\r\n\r\n\treturn models\r\n\t\t.map((model) => ({ id: model.id, name: model.name ?? model.id, external: true }))\r\n\t\t.filter((model) => (base_url.includes('openai') ? model.name.includes('gpt') : true))\r\n\t\t.sort((a, b) => {\r\n\t\t\treturn a.name.localeCompare(b.name);\r\n\t\t});\r\n};\r\n\r\nexport const generateOpenAIChatCompletion = async (\r\n\ttoken: string = '',\r\n\tbody: object,\r\n\turl: string = OPENAI_API_BASE_URL\r\n): Promise<[Response | null, AbortController]> => {\r\n\tconst controller = new AbortController();\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${url}/chat/completions`, {\r\n\t\tsignal: controller.signal,\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(body)\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn [res, controller];\r\n};\r\n\r\nexport const synthesizeOpenAISpeech = async (\r\n\ttoken: string = '',\r\n\tspeaker: string = 'alloy',\r\n\ttext: string = '',\r\n\tmodel: string = 'tts-1'\r\n) => {\r\n\tlet error = null;\r\n\r\n\tconst res = await fetch(`${OPENAI_API_BASE_URL}/audio/speech`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAuthorization: `Bearer ${token}`,\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify({\r\n\t\t\tmodel: model,\r\n\t\t\tinput: text,\r\n\t\t\tvoice: speaker\r\n\t\t})\r\n\t}).catch((err) => {\r\n\t\tconsole.log(err);\r\n\t\terror = err;\r\n\t\treturn null;\r\n\t});\r\n\r\n\tif (error) {\r\n\t\tthrow error;\r\n\t}\r\n\r\n\treturn res;\r\n};\r\n"],"names":["getOpenAIConfig","token","error","res","OPENAI_API_BASE_URL","err","updateOpenAIConfig","enable_openai_api","getOpenAIUrls","updateOpenAIUrls","urls","getOpenAIKeys","updateOpenAIKeys","keys","getOpenAIModels","urlIdx","_a","generateOpenAIChatCompletion","body","url","controller"],"mappings":"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"}